{"version":3,"sources":["components/GIFSearchInput.js","components/HoverOptions.js","components/GifOfTheDay.js","components/GIFResults.js","util/fetchFromGiphyAPI.js","util/searchForInputValue.js","App.js","serviceWorker.js","index.js","images/Brown_Frame_l.png"],"names":["GIFSearchInput","props","className","onChange","handleInput","type","placeholder","onKeyPress","e","key","keyCode","handleSearch","onClick","handleRemove","HoverOptions","propsWidth","propsHeight","index","removeImage","changeImage","imageURL","source","title","useState","copied","setCopied","style","position","width","height","rel","target","href","el","document","createElement","value","setAttribute","left","body","appendChild","select","execCommand","removeChild","GifOfTheDay","resultFromApi","result","undefined","images","gifOfTheDayAPIURL","original","url","imageDetails","image_ref","React","createRef","ref","display","hoverOptions","onLoad","element","current","borderImage","landscape","borderImageRepeat","maxWidth","src","alt","GIFResults","results","length","console","log","map","val","fixed_width","classIndex","id","Number","fetchFromGiphyAPI","valueToSearch","fetch","pickRandomImageFromResponse","resultFromAPI_JSON","arrayForResult","message","data","randomNumber","arrayOfImages","Math","floor","random","alert","searchForInputValue","then","resultFromAPIPromise","json","catch","error","a","setState","openShareDialogue","App","state","inputValue","imagesFromSearch","gotd","this","newArrayOfImages","filter","filterIndex","Fragment","newState","removeAllGifs","call","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.228155bc.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function GIFSearchInput(props) {\r\n  return (\r\n    <div className=\"search_inputs\">\r\n      <input\r\n        onChange={props.handleInput}\r\n        type=\"text\"\r\n        placeholder=\"Enter a search term\"\r\n        onKeyPress={e => {\r\n          (e.key === \"Enter\" || e.keyCode === 13) && props.handleSearch(e);\r\n        }}\r\n      ></input>\r\n      <div className=\"buttons\">\r\n        <button onClick={props.handleSearch}>Search</button>\r\n        <button onClick={props.handleRemove}>Start again</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function HoverOptions({\r\n  propsWidth,\r\n  propsHeight,\r\n  index = \"Change_image\",\r\n  removeImage,\r\n  changeImage,\r\n  imageURL,\r\n  source,\r\n  title\r\n}) {\r\n  const [copied, setCopied] = useState(\"\");\r\n\r\n  function goToSource() {}\r\n\r\n  function copyURL() {\r\n    const el = document.createElement(\"textarea\");\r\n    el.value = imageURL;\r\n    el.setAttribute(\"readonly\", \"\");\r\n    el.style.position = \"absolute\";\r\n    el.style.left = \"-9999px\";\r\n    document.body.appendChild(el);\r\n    el.select();\r\n    document.execCommand(\"copy\");\r\n    document.body.removeChild(el);\r\n    copied === \"\" ? setCopied(\"copied\") : setCopied(\"\");\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={`hover_options ${index}`}\r\n      style={{\r\n        position: \"absolute\",\r\n        width: propsWidth || \"auto\",\r\n        height: propsHeight || \"auto\"\r\n      }}\r\n      title={title}\r\n    >\r\n      <ul>\r\n        {index === \"Change_image\" ? (\r\n          <li\r\n            onClick={() => {\r\n              changeImage();\r\n            }}\r\n          >\r\n            Change image\r\n          </li>\r\n        ) : (\r\n          <li\r\n            onClick={() => {\r\n              removeImage(index);\r\n            }}\r\n          >\r\n            Remove\r\n          </li>\r\n        )}\r\n        <li onClick={goToSource}>\r\n          <a rel=\"noopener noreferrer\" target=\"_blank\" href={`${source}`}>\r\n            Source\r\n          </a>\r\n        </li>\r\n        <li className={`copy ${copied}`} onClick={copyURL}></li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport landscape from \"../images/Brown_Frame_l.png\";\r\nimport HoverOptions from \"./HoverOptions\";\r\n\r\nexport default function GifOfTheDay(props) {\r\n  const resultFromApi = props.result;\r\n  if (resultFromApi.images !== undefined) {\r\n    try {\r\n      const gifOfTheDayAPIURL = resultFromApi.images.original.url;\r\n      const imageDetails = resultFromApi.images.original;\r\n      const source = resultFromApi.source;\r\n      const title = resultFromApi.title;\r\n      let image_ref = React.createRef();\r\n\r\n      return (\r\n        <div ref={image_ref} className=\"gotd\" style={{ display: \"none\" }}>\r\n          <h2>Gif of the day!</h2>\r\n          <div className=\"gif\">\r\n            <div className=\"_image_group\">\r\n              <HoverOptions\r\n                {...props.hoverOptions}\r\n                propsWidth={imageDetails.width + \"px\"}\r\n                propsHeight={imageDetails.height + \"px\"}\r\n                imageURL={imageDetails.url}\r\n                source={source}\r\n              />\r\n              <img\r\n                onLoad={element => {\r\n                  image_ref.current.style.display = \"block\";\r\n                }}\r\n                style={{\r\n                  borderImage: `url(${landscape}) 30`,\r\n                  borderImageRepeat: \"stretch\",\r\n                  maxWidth: \"20rem\"\r\n                }}\r\n                src={gifOfTheDayAPIURL}\r\n                alt=\"gif of the day\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <label>{title}</label>\r\n        </div>\r\n      );\r\n    } catch {\r\n      return null;\r\n    }\r\n  } else return null;\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport HoverOptions from \"./HoverOptions\";\r\nimport landscape from \"../images/Brown_Frame_l.png\";\r\n\r\nexport default function GIFResults(props) {\r\n  if (props.results && props.results.length > 0) {\r\n    console.log(props.results);\r\n\r\n    const images = props.results.map((val, index) => {\r\n      const imageDetails = val.images.fixed_width;\r\n      const source = val.source;\r\n      const title = val.title;\r\n      let image_ref = React.createRef();\r\n      let classIndex = index ? \"\" : \"new\";\r\n      return (\r\n        <div\r\n          key={val.id + (props.results.length - index)}\r\n          className={`image_frame ${classIndex}`}\r\n          ref={image_ref}\r\n          style={{\r\n            display: \"none\",\r\n            width: Number(imageDetails.width) + 60 + \"px\"\r\n          }}\r\n        >\r\n          <div className=\"gif\">\r\n            <HoverOptions\r\n              {...props.hoverOptions}\r\n              index={index}\r\n              propsWidth={imageDetails.width + \"px\"}\r\n              propsHeight={imageDetails.height + \"px\"}\r\n              imageURL={imageDetails.url}\r\n              source={source}\r\n              title={title}\r\n            />\r\n            <img\r\n              onLoad={element => {\r\n                image_ref.current.style.display = \"inherit\";\r\n              }}\r\n              title={title}\r\n              alt=\"giphy_image\"\r\n              style={{\r\n                borderImage: `url(${landscape}) 30`,\r\n                borderImageRepeat: \"stretch\"\r\n              }}\r\n              src={imageDetails.url}\r\n            />\r\n          </div>\r\n          <label>{title}</label>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return <div className=\"images\">{images}</div>;\r\n  } else return null;\r\n}\r\n","function fetchFromGiphyAPI(valueToSearch) {\r\n  return fetch(\r\n    \"https://api.giphy.com/v1/gifs/search?q=\" +\r\n      valueToSearch +\r\n      \"&api_key=dc6zaTOxFJmzC\"\r\n  );\r\n}\r\nexport default fetchFromGiphyAPI;\r\n","import fetchFromGiphyAPI from \"./fetchFromGiphyAPI\";\r\n\r\nexport const randomImagePicker = arrayOfImages => {\r\n  return Math.floor(Math.random() * arrayOfImages.data.length);\r\n};\r\nexport const pickRandomImageFromResponse = (\r\n  resultFromAPI_JSON,\r\n  arrayForResult\r\n) => {\r\n  if (resultFromAPI_JSON.message === \"API rate limit exceeded\") {\r\n    throw resultFromAPI_JSON.message;\r\n  }\r\n  console.log(resultFromAPI_JSON.data.length);\r\n  if (resultFromAPI_JSON.data.length > 0) {\r\n    const randomNumber = randomImagePicker(resultFromAPI_JSON);\r\n    //select a random image from the response and push that into the array\r\n    const selectedGIF = resultFromAPI_JSON.data[randomNumber];\r\n    // const arrayWithSelectedGif = [...this.state[arrayForResult], selectedGIF];\r\n    return [arrayForResult, selectedGIF];\r\n  } else {\r\n    alert(\"Nothing was found. Try another Search term\");\r\n  }\r\n};\r\n\r\nexport default function searchForInputValue(valueToSearch, arrayForResult) {\r\n  return fetchFromGiphyAPI(valueToSearch)\r\n    .then(resultFromAPIPromise => {\r\n      return resultFromAPIPromise.json();\r\n    })\r\n    .then(resultFromAPI_JSON => {\r\n      return pickRandomImageFromResponse(resultFromAPI_JSON, arrayForResult);\r\n    })\r\n    .catch(error => {\r\n      console.error(error);\r\n      alert(error, \"Please wait a minute before trying again\");\r\n      // return { error };\r\n    });\r\n}\r\nexport { searchForInputValue };\r\n","import React, { Fragment } from \"react\";\r\nimport \"./App.css\";\r\nimport GIFSearchInput from \"./components/GIFSearchInput\";\r\nimport GifOfTheDay from \"./components/GifOfTheDay\";\r\nimport GIFResults from \"./components/GIFResults\";\r\nimport searchForInputValue from \"./util/searchForInputValue\";\r\n\r\nconst hoverOptions = function() {\r\n  return {\r\n    changeImage: async () => {\r\n      const [key, value] = await searchForInputValue(\"gif of the day\", \"gotd\");\r\n      this.setState({\r\n        [key]: value\r\n      });\r\n    },\r\n    removeImage: index => this.removeImage(index),\r\n    openShareDialogue: () => this.openShareDialogue\r\n  };\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputValue: \"\",\r\n      imagesFromSearch: [],\r\n      gotd: []\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const [key, value] = await searchForInputValue(\"gif of the day\", \"gotd\");\r\n    this.setState({ [key]: value });\r\n  }\r\n\r\n  //searchForInputValue = (valueToSearch, arrayForResult)=> searchForInputValue(valueToSearch, arrayForResult);\r\n\r\n  removeAllGifs(e) {\r\n    this.setState({ imagesFromSearch: [] });\r\n  }\r\n\r\n  inputValue(e) {\r\n    this.setState({ inputValue: e.target.value });\r\n  }\r\n  removeImage(index) {\r\n    //console.log(\"doing\", this);\r\n    const newArrayOfImages = [...this.state.imagesFromSearch].filter(\r\n      (value, filterIndex) => index !== filterIndex\r\n    );\r\n    this.setState({\r\n      imagesFromSearch: newArrayOfImages\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <header>\r\n          <h1>GIPHY PARTY</h1>\r\n          <GIFSearchInput\r\n            handleInput={e => this.inputValue(e)}\r\n            handleSearch={async e => {\r\n              try {\r\n                const [key, value] = await searchForInputValue(\r\n                  this.state.inputValue,\r\n                  \"imagesFromSearch\"\r\n                );\r\n                const newState = [value, ...this.state.imagesFromSearch];\r\n                this.setState({\r\n                  [key]: newState\r\n                });\r\n              } catch (err) {}\r\n            }}\r\n            handleRemove={e => this.removeAllGifs(e)}\r\n          />\r\n        </header>\r\n        <main className=\"container\">\r\n          <GifOfTheDay\r\n            result={this.state.gotd}\r\n            hoverOptions={hoverOptions.call(this)}\r\n          />\r\n          <GIFResults\r\n            hoverOptions={hoverOptions.call(this)}\r\n            results={this.state.imagesFromSearch}\r\n          />\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Brown_Frame_l.0ad9567b.png\";"],"sourceRoot":""}