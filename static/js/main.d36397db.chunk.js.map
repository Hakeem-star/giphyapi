{"version":3,"sources":["images/Brown_Frame_l.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","Gotd","props","console","log","result","final","value","undefined","images","original","url","className","style","borderImage","landscape","borderImageRepeat","src","alt","InputQuery","onChange","this","handleInput","type","placeholder","onKeyPress","e","key","handleSearch","onClick","handleRemove","React","Component","Results","results","length","map","val","index","id","fixed_width","App","state","inputValue","ajaxResponse","gotd","search","day","query","Na","fetch","then","json","res","data","random","Math","floor","push","setState","alert","target","remove","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d36397db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Brown_Frame_l.0ad9567b.png\";","import React, { Fragment } from \"react\";\r\nimport \"./App.css\";\r\nimport landscape from \"./images/Brown_Frame_l.png\";\r\n\r\nfunction Gotd(props) {\r\n  console.log(props.result);\r\n  let final = \"\";\r\n  let value = \"\";\r\n\r\n  if (props.result[0] !== undefined) {\r\n    value = props.result[0].images.original.url;\r\n    final = (\r\n      <div className=\"container gotd\">\r\n        <h2>Gif of the day!</h2>\r\n        <img\r\n          style={{\r\n            borderImage: `url(${landscape}) 30`,\r\n            borderImageRepeat: \"stretch\"\r\n          }}\r\n          src={value}\r\n          alt=\"gif of the day\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return final;\r\n}\r\n\r\nclass InputQuery extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          onChange={this.props.handleInput}\r\n          type=\"text\"\r\n          placeholder=\"Enter a search term\"\r\n          onKeyPress={e => {\r\n            e.key === \"Enter\" && this.props.handleSearch(e);\r\n          }}\r\n        ></input>\r\n        <button onClick={this.props.handleSearch}>Search Giphy!</button>\r\n        <button onClick={this.props.handleRemove}>Remove Images</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Results extends React.Component {\r\n  render() {\r\n    let images = \"\";\r\n\r\n    if (this.props.results.length > 0) {\r\n      images = this.props.results.map((val, index) => {\r\n        return (\r\n          <div className=\"image_frame\">\r\n            <img\r\n              alt=\"\"\r\n              key={val.id + index}\r\n              style={{\r\n                borderImage: `url(${landscape}) 30`,\r\n                borderImageRepeat: \"stretch\"\r\n              }}\r\n              src={val.images.fixed_width.url}\r\n            />\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n\r\n    return <div className=\"images\">{images}</div>;\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputValue: \"\",\r\n      ajaxResponse: [],\r\n      gotd: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.search(\"gif of the day\");\r\n  }\r\n\r\n  search(day) {\r\n    let results = day ? this.state.gotd : this.state.ajaxResponse;\r\n    let query = day || this.state.inputValue;\r\n    const Na = <h3>Nothing was found</h3>;\r\n    fetch(\r\n      \"http://api.giphy.com/v1/gifs/search?q=\" +\r\n        query +\r\n        \"&api_key=dc6zaTOxFJmzC\"\r\n    )\r\n      .then(result => result.json())\r\n      .then(res => {\r\n        console.log(res);\r\n        if (res.data.length > 0) {\r\n          let random = Math.floor(Math.random() * res.data.length);\r\n          console.log(this, res, results, random);\r\n          //select a random image from the response and push that into the array\r\n          results.push(res.data[random]);\r\n        } else {\r\n          alert(\"Nothing was found. Try another Search term\");\r\n          return;\r\n        }\r\n\r\n        if (day) {\r\n          this.setState({ gotd: results });\r\n        } else if (results.length > 0) {\r\n          this.setState({ ajaxResponse: results });\r\n        } else {\r\n          this.setState({ ajaxResponse: Na });\r\n        }\r\n      });\r\n  }\r\n\r\n  remove(e) {\r\n    this.setState({ ajaxResponse: [] });\r\n  }\r\n\r\n  inputValue(e) {\r\n    this.setState({ inputValue: e.target.value });\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state);\r\n    return (\r\n      <Fragment>\r\n        <header>\r\n          <h1>GIPHY PARTY</h1>\r\n          <InputQuery\r\n            handleInput={e => this.inputValue(e)}\r\n            handleSearch={e => this.search()}\r\n            handleRemove={e => this.remove(e)}\r\n          />\r\n        </header>\r\n        <main className=\"container\">\r\n          <Gotd result={this.state.gotd} />\r\n          <Results results={this.state.ajaxResponse} />\r\n        </main>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}